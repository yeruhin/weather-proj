{"version":3,"sources":["cmps/SearchBar.js","cmps/WeatherPreview.js","cmps/WeatherList.js","services/WeatherService.js","pages/WeatherPage.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","React","forwardRef","props","ref","SubmitInput","ev","nativeEvent","type","key","SearchWheaterByInput","current","value","react_default","a","createElement","className","FormControl","placeholder","onKeyUp","Button","variant","onClick","WeatherPreview","dailyWeather","date","temp","src","icon","alt","weatherMain","weatherDesc","WeatherList","dailyWeaterList","i","dailySumTemp","dailyIcon","formatedDate","j","idx","hour","Date","list","dt","getHours","main","concat","weather","getDay","getMonth","getFullYear","parseInt","description","push","cmps_WeatherPreview","API_KEY","WeatherService","getWeatherByCity","cityName","Number","Promise","reject","axios","get","then","res","data","catch","err","console","error","WeatherPage","state","invalidInput","input","log","_this","setState","Object","objectSpread","createRef","cmps_SearchBar","this","bind","length","cmps_WeatherList","Component","configure","adapter","Adapter","App","pages_WeatherPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d0d42a8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormControl, Button } from 'react-bootstrap';\n\nconst SearchBar = React.forwardRef((props,ref) => {\n\n    const SubmitInput = (ev) => {\n        if (ev.nativeEvent.type === 'click' || ev.nativeEvent.key === \"Enter\"){\n            props.SearchWheaterByInput(ref.current.value)\n        }\n    }\n\n    return (\n        <div className=\"search-bar\">\n            <FormControl ref={ref} type=\"text\" placeholder=\"Enter City, Country\" onKeyUp={SubmitInput} />\n            <Button variant=\"light\" onClick={SubmitInput}>Search</Button>\n        </div>\n    )\n})\n\nSearchBar.propTypes = {\n    SearchWheaterByInput: PropTypes.func\n}\n\nexport default SearchBar","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst WeatherPreview = (props) => {\n    return (\n        <div className=\"weather-preview\">\n            <h4>{props.dailyWeather.date}</h4>\n            <h1>{props.dailyWeather.temp}</h1>\n            <img src={props.dailyWeather.icon} alt=\"Weather Icon\"/>\n            <h2>{props.dailyWeather.weatherMain}</h2>\n            <h5>{props.dailyWeather.weatherDesc}</h5>\n        </div>\n    )\n}\n\nWeatherPreview.propTypes = {\n    dailyWeather : PropTypes.object\n}\n\nexport default WeatherPreview","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WeatherPreview from './WeatherPreview'\n\nconst WeatherList = (props) => {\n    var dailyWeaterList = []\n\n    for (let i = 0; i < 5; i++) {\n\n        let dailySumTemp = null\n        let dailyIcon = null\n        let formatedDate = null\n\n        for (let j = 0; j < 8; j++) {\n            let idx = (i * 8) + j\n            let hour = new Date(props.list[idx].dt * 1000).getHours()\n            dailySumTemp += props.list[idx].main.temp\n            if (hour === 15) {\n                dailyIcon = `http://openweathermap.org/img/w/${props.list[idx].weather[0].icon}.png`\n                let date = new Date(props.list[idx].dt * 1000)\n                formatedDate = `${date.getDay()}/${date.getMonth()}/${date.getFullYear()}`\n            }\n        }\n\n        let dailyAvgTemp = dailySumTemp / 8 - 273.15\n        let dailyWeather = {\n            date : formatedDate,\n            temp: parseInt(dailyAvgTemp),\n            weatherMain: props.list[i].weather[0].main,\n            weatherDesc: props.list[i].weather[0].description,\n            icon: dailyIcon\n        }\n\n        dailyWeaterList.push(<WeatherPreview dailyWeather={dailyWeather} key={i} />)\n    }\n\n    return (\n        <div className=\"weather-list\">\n            {dailyWeaterList}\n        </div>\n    )\n}\n\nWeatherList.propTypes = {\n    list: PropTypes.arrayOf(PropTypes.object)\n}\n\nexport default WeatherList","import axios from 'axios'\n\nconst API_KEY = '6dab74a8c4f794cbd4e2b2064d21da17'\n\nfunction getWeatherByCity(cityName) {\n    if (Number(cityName) || !cityName) return Promise.reject()\n    return axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${API_KEY}`)\n        .then(res => res.data)\n        .catch(err => console.error(err))\n}\n\n\nexport default {\n    getWeatherByCity,\n} ","import React, { Component } from 'react';\nimport SearchBar from '../cmps/SearchBar'\nimport WeatherList from '../cmps/WeatherList'\nimport WeatherService from '../services/WeatherService'\n\nclass WeatherPage extends Component {\n\n    state = {\n        list: [],\n        invalidInput: false\n    }\n\n    SearchWheaterByInput = (input) => {\n        WeatherService.getWeatherByCity(input)\n            .then(res => {\n                console.log(res)\n                this.setState({ ...this.state, \n                                list: res.list, \n                                invalidInput: false })\n            })\n            .catch(() => {\n                this.setState({ ...this.state, \n                                list: [], \n                                invalidInput: true })\n            })\n    }\n\n    render() {\n        const ref = React.createRef();\n        return (\n            <div className=\"weather-page\">\n                <h1>World Weather</h1>\n                <SearchBar SearchWheaterByInput={this.SearchWheaterByInput.bind(this)} ref={ref} />\n                {\n                    (this.state.list.length > 0) ?\n                        <WeatherList list={this.state.list} /> :\n                        (this.state.invalidInput) ? \n                        <p className=\"error\">Invalid Input</p> : ''\n                }\n            </div>\n        )\n    }\n\n}\n\nexport default WeatherPage","import React from 'react';\nimport './App.css';\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport WeatherPage from './pages/WeatherPage'\n\nconfigure({ adapter: new Adapter() });\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}